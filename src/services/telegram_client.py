"""
–°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–∞ Telegram API.
"""

import logging
from typing import AsyncIterator, Dict, List, Tuple, Any, Optional

from telethon import TelegramClient, errors, utils
from telethon.tl.functions.channels import GetForumTopicsRequest
from telethon.tl.types import Message, TypePeer

from ..config import Constants, ExportConfig
from ..exceptions import TelegramAPIError, ChatResolutionError
from ..models import TopicData
from ..utils import retry_on_error

logger = logging.getLogger(__name__)


class TelegramAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API."""

    def __init__(self, config: ExportConfig):
        self.config = config
        self.client: Optional[TelegramClient] = None

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        self.client = TelegramClient(
            self.config.session_name, self.config.api_id, self.config.api_hash
        )
        await self.client.start()
        self.client.parse_mode = "html"
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        if self.client:
            await self.client.disconnect()

    @retry_on_error()
    async def resolve_chat(self, chat_identifier: str) -> TypePeer:
        """–†–∞–∑—Ä–µ—à–∏—Ç—å —á–∞—Ç –ø–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É."""
        if not self.client:
            raise TelegramAPIError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∏—Å–ª–æ–º (ID —á–∞—Ç–∞)
            if chat_identifier.lstrip("-").isdigit():
                chat_id = int(chat_identifier)
                entity = await self.client.get_entity(chat_id)
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω —á–∞—Ç –ø–æ ID: {utils.get_display_name(entity)} (ID: {chat_id})"
                )
                return entity

            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É
            return await self._search_chat_by_name(chat_identifier)

        except Exception as e:
            raise ChatResolutionError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —á–∞—Ç '{chat_identifier}': {e}"
            )

    async def _search_chat_by_name(self, search_term: str) -> TypePeer:
        """–ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É."""
        if not self.client:
            raise TelegramAPIError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        logger.info(f"–ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏/–Ω–∏–∫–Ω–µ–π–º—É: '{search_term}'")

        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        username = search_term.lstrip("@")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        try:
            entity = await self.client.get_entity(username)
            logger.info(
                f"–ù–∞–π–¥–µ–Ω —á–∞—Ç –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: {utils.get_display_name(entity)} (@{username})"
            )
            return entity
        except Exception:
            logger.debug(f"–ß–∞—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '@{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏...")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–∏–∫–Ω–µ–π–º—É, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        matching_chats: List[Tuple[Any, str, str]] = []

        async for dialog in self.client.iter_dialogs():
            entity = dialog.entity
            display_name = utils.get_display_name(entity)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            if display_name.lower() == search_term.lower():
                matching_chats.append((entity, display_name, "exact"))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            elif search_term.lower() in display_name.lower():
                matching_chats.append((entity, display_name, "partial"))

        if not matching_chats:
            raise ChatResolutionError(f"–ß–∞—Ç —Å –∏–º–µ–Ω–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∑–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ
        matching_chats.sort(key=lambda x: (x[2] != "exact", x[1].lower()))

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if len(matching_chats) == 1:
            entity, display_name, _ = matching_chats[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —á–∞—Ç: {display_name} (ID: {entity.id})")
            return entity

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å
        return await self._handle_multiple_chats(matching_chats, search_term)

    async def _handle_multiple_chats(
        self, matching_chats: List[Tuple[Any, str, str]], search_term: str
    ) -> TypePeer:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏."""
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matching_chats)} —á–∞—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º '{search_term}':")

        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(matching_chats)} —á–∞—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º '{search_term}':")
        for i, (entity, display_name, match_type) in enumerate(matching_chats, 1):
            match_indicator = "üéØ" if match_type == "exact" else "üîç"
            username_info = (
                f" (@{entity.username})"
                if hasattr(entity, "username") and entity.username
                else ""
            )
            print(
                f"{i}. {match_indicator} {display_name}{username_info} (ID: {entity.id})"
            )

        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç (1-{len(matching_chats)}): ").strip()
                if not choice:
                    continue

                index = int(choice) - 1
                if 0 <= index < len(matching_chats):
                    entity, display_name, _ = matching_chats[index]
                    logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {display_name} (ID: {entity.id})")
                    return entity
                else:
                    print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(matching_chats)}")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                raise ChatResolutionError("–í—ã–±–æ—Ä —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    @retry_on_error()
    async def load_forum_topics(self, entity: TypePeer) -> Tuple[Dict[int, TopicData], bool]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (topics, is_forum)."""
        if not self.client:
            raise TelegramAPIError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        topics = {}
        is_forum = False
        excluded_count = 0
        
        try:
            response = await self.client(
                GetForumTopicsRequest(
                    entity,
                    offset_date=None,
                    offset_id=0,
                    offset_topic=0,
                    limit=Constants.FORUM_TOPICS_LIMIT,
                )
            )

            is_forum = True
            logger.info("–ß–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")

            for topic in response.topics:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ø–∏–∫–æ–≤ (–±–µ–ª—ã–π –∏ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–∫–∏)
                if self._should_include_topic(topic.title):
                    topics[topic.id] = TopicData(id=topic.id, title=topic.title)
                else:
                    excluded_count += 1
                    logger.info(f"–¢–æ–ø–∏–∫ '{topic.title}' (ID: {topic.id}) –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞")

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞")
            if excluded_count > 0:
                logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {excluded_count}")

        except errors.RPCError:
            logger.info("–ß–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–ø–∏–∫–∞–º")
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            topics[1] = TopicData(id=1, title="General")

        return topics, is_forum

    def _should_include_topic(self, topic_title: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ç–æ–ø–∏–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç."""
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ
        if self.config.included_topics:
            for included_topic in self.config.included_topics:
                if topic_title.lower() == included_topic.lower():
                    break
            else:
                # –¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
                return False
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if self.config.excluded_topics:
            for excluded_topic in self.config.excluded_topics:
                if topic_title.lower() == excluded_topic.lower():
                    return False
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–æ–ø–∏–∫–∏
        return True

    def iter_messages(self, entity: TypePeer, topic_id: Optional[int] = None) -> AsyncIterator[Message]:
        """–ò—Ç–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if not self.client:
            raise TelegramAPIError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if topic_id is not None:
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–ø–∏–∫—É
            return self.client.iter_messages(entity, reverse=False, reply_to=topic_id)
        else:
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
            return self.client.iter_messages(entity, reverse=False)
