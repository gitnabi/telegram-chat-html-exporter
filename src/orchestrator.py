"""
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram —á–∞—Ç–æ–≤.
"""

from pathlib import Path

from .config.models import ExportConfig, MediaConfig
from .exceptions.validation import ValidationError
from .models.data import ExportResult
from .renderers.html_renderer import HTMLRenderer
from .renderers.message_renderer import HTMLMessageRenderer
from .services.file_manager import FileManager
from .services.media_processor import MediaProcessor
from .services.message_processor import MessageProcessor
from .services.telegram_client import TelegramAPIClient
from .utils.decorators import retry_on_error
from .utils.logging import get_logger

logger = get_logger(__name__)


class ExportOrchestrator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞."""

    def __init__(self, config: ExportConfig):
        self.config = config
        self._validate_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.file_manager = FileManager(config)
        self.telegram_client = TelegramAPIClient(config)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
        template_path = Path(__file__).parent.parent / "template.html"
        self.html_renderer = HTMLRenderer(template_path)
        # message_renderer –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ export_chat –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        self.message_renderer = None

    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if self.config.api_id <= 0:
            raise ValidationError("api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

        if not self.config.api_hash:
            raise ValidationError("api_hash –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if self.config.max_file_size_mb <= 0:
            raise ValidationError("max_file_size_mb –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    @retry_on_error()
    async def export_chat(self) -> ExportResult:
        """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–æ–≤."""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç Telegram —á–∞—Ç–∞...")
            logger.info(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞: {self.config.chat_identifier}")
            logger.info(f"–í—ã–≤–æ–¥: {self.config.output_path}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            media_dir = self.file_manager.setup_directories()

            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            media_config = MediaConfig(
                max_file_size_mb=self.config.max_file_size_mb,
                skip_media_types=self.config.skip_media_types,
                max_concurrent_downloads=self.config.max_concurrent_downloads,
            )
            media_processor = MediaProcessor(media_dir, media_config)

            async with self.telegram_client as client:
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É
                entity = await client.resolve_chat(self.config.chat_identifier)

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞
                topics, is_forum = await client.load_forum_topics(entity)

                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self.message_renderer = HTMLMessageRenderer(
                    current_chat_id=entity.id, 
                    is_forum=is_forum
                )

                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                message_processor = MessageProcessor(
                    self.config, media_processor, self.message_renderer
                )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                if is_forum:
                    # –ï—Å–ª–∏ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º, –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–ø–∏–∫—É
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—É–º–∞: –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–ø–∏–∫–∞–º")
                    
                    processed_topics = {}
                    for topic_id, topic_data in topics.items():
                        logger.info(f"üîÑ ‚ïê‚ïê‚ïê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞: {topic_data.title} (ID: {topic_id}) ‚ïê‚ïê‚ïê")
                        topic_messages_iter = client.iter_messages(entity, topic_id)
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞
                        from .models.data import TopicData
                        temp_topics = {topic_id: TopicData(id=topic_id, title=topic_data.title)}
                        processed_temp_topics = await message_processor.process_messages_streaming(
                            topic_messages_iter, temp_topics, topic_id, client
                        )
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
                        processed_topics[topic_id] = processed_temp_topics[topic_id]
                    topics = processed_topics
                else:
                    # –ï—Å–ª–∏ —á–∞—Ç –æ–±—ã—á–Ω—ã–π, –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞: –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
                    topics = await message_processor.process_messages_streaming(
                        client.iter_messages(entity), topics, topic_id=1, telegram_client=client
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                total_messages = sum(len(topic.messages) for topic in topics.values())
                
                if not topics or total_messages == 0:
                    logger.info("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    logger.info("–°–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π HTML —Ñ–∞–π–ª...")

                logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {len(topics)} —Ç–æ–ø–∏–∫–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")

                # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –¥–∞–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö)
                if not topics or total_messages == 0:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π HTML —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
                    empty_message = "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                    html_content = self.html_renderer.render_empty(entity, empty_message)
                else:
                    html_content = self.html_renderer.render(entity, topics)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.file_manager.save_export(html_content)
                self.file_manager.copy_required_files()

                # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                media_count = len(media_processor.downloaded_files)

                result = ExportResult(
                    success=True,
                    output_path=self.config.output_path,
                    total_messages=total_messages,
                    total_topics=len(topics),
                    media_count=media_count,
                )

                logger.info("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"‚úì HTML —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {self.config.output_path}")
                logger.info(f"‚úì –¢–æ–ø–∏–∫–æ–≤: {len(topics)}")
                logger.info(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
                logger.info(f"‚úì –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {media_count}")

                return result

        except Exception as e:
            from .exceptions.api import ChatResolutionError, TelegramAPIError
            
            if isinstance(e, ChatResolutionError):
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            elif isinstance(e, TelegramAPIError):
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
            return ExportResult(
                success=False,
                output_path=self.config.output_path,
                total_messages=0,
                total_topics=0,
                media_count=0,
                error=str(e),
            )
